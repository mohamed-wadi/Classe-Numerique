const axios = require('axios');
const fs = require('fs');
const path = require('path');

// Configuration
const API_BASE = process.env.API_URL || 'http://localhost:5000';
const TEST_PDF_NAME = 'test-mod√®les.pdf';

console.log('üß™ Test des corrections appliqu√©es...\n');

async function testPDFEncoding() {
  console.log('üìÑ Test de l\'encodage des fichiers PDF...');
  
  try {
    // Test de la route de debug pour lister les fichiers
    const debugResponse = await axios.get(`${API_BASE}/debug/uploads`);
    console.log('‚úÖ Route de debug accessible');
    console.log(`üìÇ Nombre de fichiers: ${debugResponse.data.filesCount}`);
    
    if (debugResponse.data.files.length > 0) {
      console.log('üìã Fichiers disponibles:');
      debugResponse.data.files.forEach(file => {
        console.log(`  - ${file.name}`);
      });
      
      // Tester l'acc√®s au premier fichier PDF trouv√©
      const pdfFile = debugResponse.data.files.find(f => f.name.endsWith('.pdf'));
      if (pdfFile) {
        console.log(`\nüîç Test d'acc√®s au fichier: ${pdfFile.name}`);
        
        try {
          const fileResponse = await axios.get(`${API_BASE}/uploads/${pdfFile.name}`, {
            responseType: 'stream'
          });
          console.log('‚úÖ Fichier PDF accessible');
          console.log(`üìä Type de contenu: ${fileResponse.headers['content-type']}`);
          console.log(`üìã Content-Disposition: ${fileResponse.headers['content-disposition']}`);
        } catch (fileError) {
          console.log('‚ùå Erreur d\'acc√®s au fichier:', fileError.response?.data || fileError.message);
        }
      } else {
        console.log('‚ÑπÔ∏è  Aucun fichier PDF trouv√© pour le test');
      }
    } else {
      console.log('‚ÑπÔ∏è  Aucun fichier trouv√© dans le dossier uploads');
    }
    
  } catch (error) {
    console.log('‚ùå Erreur lors du test d\'encodage:', error.response?.data || error.message);
  }
}

async function testServerHealth() {
  console.log('\nüè• Test de sant√© du serveur...');
  
  try {
    const healthResponse = await axios.get(`${API_BASE}/health`);
    console.log('‚úÖ Serveur en bonne sant√©');
    console.log(`üåç Environnement: ${healthResponse.data.environment}`);
    console.log(`‚è±Ô∏è  Uptime: ${Math.round(healthResponse.data.uptime)}s`);
    console.log(`üíæ Volume path: ${healthResponse.data.volumePath}`);
  } catch (error) {
    console.log('‚ùå Erreur de sant√© du serveur:', error.message);
  }
}

async function testAccessibility() {
  console.log('\n‚ôø Test d\'accessibilit√©...');
  
  // V√©rifier que les corrections d'accessibilit√© sont en place
  const teacherDashboardPath = path.join(__dirname, 'client/src/components/TeacherDashboard.js');
  
  if (fs.existsSync(teacherDashboardPath)) {
    const content = fs.readFileSync(teacherDashboardPath, 'utf8');
    
    if (content.includes('aria-hidden="false"')) {
      console.log('‚úÖ Correction aria-hidden appliqu√©e dans TeacherDashboard');
    } else {
      console.log('‚ùå Correction aria-hidden manquante dans TeacherDashboard');
    }
    
    if (content.includes('aria-label="Ajouter du contenu"')) {
      console.log('‚úÖ Label d\'accessibilit√© am√©lior√© pour le bouton FAB');
    } else {
      console.log('‚ùå Label d\'accessibilit√© manquant pour le bouton FAB');
    }
    
    if (content.includes('zIndex: 1000')) {
      console.log('‚úÖ Z-index d√©fini pour √©viter les conflits');
    } else {
      console.log('‚ùå Z-index manquant pour le bouton FAB');
    }
  } else {
    console.log('‚ùå Fichier TeacherDashboard.js non trouv√©');
  }
}

async function testEncodingFixes() {
  console.log('\nüî§ Test des corrections d\'encodage...');
  
  const contentRoutePath = path.join(__dirname, 'server/routes/content.js');
  const serverIndexPath = path.join(__dirname, 'server/index.js');
  
  if (fs.existsSync(contentRoutePath)) {
    const content = fs.readFileSync(contentRoutePath, 'utf8');
    
    if (content.includes('Buffer.from(file.originalname, \'latin1\').toString(\'utf8\')')) {
      console.log('‚úÖ Correction d\'encodage des noms de fichiers appliqu√©e');
    } else {
      console.log('‚ùå Correction d\'encodage des noms de fichiers manquante');
    }
  }
  
  if (fs.existsSync(serverIndexPath)) {
    const content = fs.readFileSync(serverIndexPath, 'utf8');
    
    if (content.includes('decodeURIComponent(req.params.filename)')) {
      console.log('‚úÖ D√©codage URI des noms de fichiers appliqu√©');
    } else {
      console.log('‚ùå D√©codage URI des noms de fichiers manquant');
    }
    
    if (content.includes('filename*=UTF-8\'\'')) {
      console.log('‚úÖ Headers UTF-8 pour les fichiers appliqu√©s');
    } else {
      console.log('‚ùå Headers UTF-8 pour les fichiers manquants');
    }
    
    if (content.includes('serveFile')) {
      console.log('‚úÖ Fonction helper serveFile cr√©√©e');
    } else {
      console.log('‚ùå Fonction helper serveFile manquante');
    }
  }
}

async function runAllTests() {
  console.log('üöÄ D√©marrage des tests...\n');
  
  await testAccessibility();
  await testEncodingFixes();
  await testServerHealth();
  await testPDFEncoding();
  
  console.log('\n‚ú® Tests termin√©s!');
  console.log('\nüìã R√©sum√© des corrections appliqu√©es:');
  console.log('  1. ‚úÖ Correction aria-hidden sur le bouton FAB');
  console.log('  2. ‚úÖ Am√©lioration des labels d\'accessibilit√©');
  console.log('  3. ‚úÖ Correction de l\'encodage des noms de fichiers');
  console.log('  4. ‚úÖ Am√©lioration de la gestion des fichiers PDF');
  console.log('  5. ‚úÖ Headers UTF-8 pour les t√©l√©chargements');
  console.log('  6. ‚úÖ Fonction de recherche de fichiers similaires');
}

// Ex√©cuter les tests
runAllTests().catch(console.error);